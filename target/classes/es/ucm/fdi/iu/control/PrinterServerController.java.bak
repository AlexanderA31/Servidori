package es.ucm.fdi.iu.control;

import es.ucm.fdi.iu.model.Printer;
import es.ucm.fdi.iu.repository.PrinterRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.net.InetAddress;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Controlador para el servidor de impresión centralizado
 * 
 * Proporciona:
 * - Lista de impresoras disponibles en formato IPP
 * - Scripts de instalación para clientes
 * - Instrucciones de configuración
 */
@Controller
@Slf4j
@RequestMapping("/print-server")
public class PrinterServerController {

    private final PrinterRepository printerRepository;
    
    public PrinterServerController(PrinterRepository printerRepository) {
        this.printerRepository = printerRepository;
    }

    /**
     * Página principal del servidor de impresión
     */
    @GetMapping
    public String printServerIndex(Model model) {
        try {
            String serverIp = InetAddress.getLocalHost().getHostAddress();
            model.addAttribute("serverIp", serverIp);
            
            List<Printer> printers = printerRepository.findAll();
            model.addAttribute("printers", printers);
            model.addAttribute("totalPrinters", printers.size());
            
            // Generar URIs IPP para cada impresora
            List<PrinterInfo> printerInfos = printers.stream()
                .map(p -> new PrinterInfo(
                    p.getAlias(),
                    p.getModel(),
                    p.getLocation(),
                    buildIppUri(serverIp, p.getAlias()),
                    buildWindowsCommand(serverIp, p.getAlias()),
                    buildLinuxCommand(serverIp, p.getAlias())
                ))
                .collect(Collectors.toList());
            
            model.addAttribute("printerInfos", printerInfos);
            
            log.info("Mostrando servidor de impresión con {} impresoras", printers.size());
            
        } catch (Exception e) {
            log.error("Error al obtener información del servidor", e);
            model.addAttribute("serverIp", "localhost");
            model.addAttribute("printers", Collections.emptyList());
        }
        
        return "print-server";
    }

    /**
     * API REST: Lista todas las impresoras disponibles en formato JSON
     */
    @GetMapping("/api/printers")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> listPrinters() {
        try {
            String serverIp = InetAddress.getLocalHost().getHostAddress();
            List<Printer> printers = printerRepository.findAll();
            
            List<Map<String, String>> printerList = printers.stream()
                .map(p -> {
                    Map<String, String> info = new HashMap<>();
                    info.put("name", p.getAlias());
                    info.put("model", p.getModel());
                    info.put("location", p.getLocation());
                    info.put("ippUri", buildIppUri(serverIp, p.getAlias()));
                    return info;
                })
                .collect(Collectors.toList());
            
            Map<String, Object> response = new HashMap<>();
            response.put("serverIp", serverIp);
            response.put("port", 631);
            response.put("printers", printerList);
            response.put("total", printerList.size());
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            log.error("Error en API de impresoras", e);
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * Descarga el script de PowerShell para Windows
     */
    @GetMapping("/download/windows-script")
    public ResponseEntity<String> downloadWindowsScript() {
        try {
            String script = generateWindowsScript();
            return ResponseEntity.ok()
                .header("Content-Disposition", "attachment; filename=add-printer.ps1")
                .header("Content-Type", "text/plain")
                .body(script);
        } catch (Exception e) {
            log.error("Error generando script Windows", e);
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * Descarga el script de Bash para Linux
     */
    @GetMapping("/download/linux-script")
    public ResponseEntity<String> downloadLinuxScript() {
        try {
            String script = generateLinuxScript();
            return ResponseEntity.ok()
                .header("Content-Disposition", "attachment; filename=add-printer.sh")
                .header("Content-Type", "text/plain")
                .body(script);
        } catch (Exception e) {
            log.error("Error generando script Linux", e);
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * API: Genera comando de instalación para una impresora específica
     */
    @GetMapping("/api/install-command/{printerName}")
    @ResponseBody
    public ResponseEntity<Map<String, String>> getInstallCommand(@PathVariable String printerName) {
        try {
            String serverIp = InetAddress.getLocalHost().getHostAddress();
            
            Map<String, String> commands = new HashMap<>();
            commands.put("windows", buildWindowsCommand(serverIp, printerName));
            commands.put("linux", buildLinuxCommand(serverIp, printerName));
            commands.put("ippUri", buildIppUri(serverIp, printerName));
            
            return ResponseEntity.ok(commands);
            
        } catch (Exception e) {
            return ResponseEntity.internalServerError().build();
        }
    }

    // Métodos auxiliares
    
    private String buildIppUri(String serverIp, String printerName) {
        String safeName = printerName.replace(" ", "_");
        return String.format("ipp://%s:631/printers/%s", serverIp, safeName);
    }

    private String buildWindowsCommand(String serverIp, String printerName) {
        String safeName = printerName.replace(" ", "_");
        return String.format(
            ".\\add-printer-windows.ps1 -ServerIP \"%s\" -PrinterName \"%s\"",
            serverIp, safeName
        );
    }

    private String buildLinuxCommand(String serverIp, String printerName) {
        String safeName = printerName.replace(" ", "_");
        return String.format(
            "./add-printer-linux.sh %s %s",
            serverIp, safeName
        );
    }

    private String generateWindowsScript() {
        // El script completo esta en scripts/add-printer-windows.ps1
        return """
            <#
            ═══════════════════════════════════════════════════════
            Script PowerShell para agregar impresoras IPP
            ═══════════════════════════════════════════════════════
            
            INSTRUCCIONES DE USO:
            
            1. Guardar este script como: add-printer.ps1
            
            2. Abrir PowerShell como Administrador:
               - Presiona Windows + X
               - Selecciona "Windows PowerShell (Admin)" o "Terminal (Admin)"
            
            3. Permitir ejecución de scripts (solo primera vez):
               Set-ExecutionPolicy RemoteSigned -Scope CurrentUser
            
            4. Navegar a la carpeta donde guardaste el script:
               cd C:\Ruta\Donde\Guardaste\El\Script
            
            5. Ejecutar el script:
               .\add-printer.ps1 -ServerIP "192.168.1.100" -PrinterName "HP_LaserJet"
            
            EJEMPLOS:
               .\add-printer.ps1 -ServerIP "192.168.1.100" -PrinterName "HP_LaserJet"
               .\add-printer.ps1 -ServerIP "10.0.0.50" -PrinterName "Canon_MF620C"
            
            NOTAS:
               - Requiere PowerShell como Administrador
               - Requiere Windows 10/11 o Windows Server 2016+
               - El servidor debe estar accesible en el puerto 631
               - Windows instalará automáticamente el driver IPP genérico
            
            ═══════════════════════════════════════════════════════
            #>
            
            param(
                [Parameter(Mandatory=$true)]
                [string]$ServerIP,
                
                [Parameter(Mandatory=$true)]
                [string]$PrinterName,
                
                [Parameter(Mandatory=$false)]
                [string]$PrinterAlias = $PrinterName
            )
            
            # Verificar que se ejecuta como administrador
            $isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
            if (-not $isAdmin) {
                Write-Host "❌ ERROR: Este script debe ejecutarse como Administrador" -ForegroundColor Red
                Write-Host ""
                Write-Host "Presiona cualquier tecla para salir..."
                $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
                exit 1
            }
            
            Write-Host "══════════════════════════════════════════════════════════" -ForegroundColor Cyan
            Write-Host "  Configurando Impresora IPP" -ForegroundColor Cyan
            Write-Host "══════════════════════════════════════════════════════════" -ForegroundColor Cyan
            Write-Host "  Servidor: $ServerIP"
            Write-Host "  Impresora: $PrinterName"
            Write-Host "  Alias: $PrinterAlias"
            Write-Host "══════════════════════════════════════════════════════════" -ForegroundColor Cyan
            Write-Host ""
            
            # Construir URI
            $PrinterUri = "http://${ServerIP}:631/printers/${PrinterName}"
            
            # Verificar conectividad
            Write-Host "⏳ Verificando conectividad..." -ForegroundColor Yellow
            $tcpClient = New-Object System.Net.Sockets.TcpClient
            try {
                $tcpClient.Connect($ServerIP, 631)
                $tcpClient.Close()
                Write-Host "✅ Servidor accesible" -ForegroundColor Green
            } catch {
                Write-Host "❌ ERROR: No se puede conectar al servidor" -ForegroundColor Red
                Write-Host "Verifica que:" -ForegroundColor Yellow
                Write-Host "  1. El servidor esté encendido"
                Write-Host "  2. La IP sea correcta: $ServerIP"
                Write-Host "  3. El firewall permita conexiones al puerto 631"
                exit 1
            }
            
            # Eliminar impresora si ya existe
            $existingPrinter = Get-Printer -Name $PrinterName -ErrorAction SilentlyContinue
            if ($existingPrinter) {
                Write-Host "⚠️  Impresora ya existe, eliminando..." -ForegroundColor Yellow
                Remove-Printer -Name $PrinterName -Confirm:$false
            }
            
            # Agregar impresora
            Write-Host "⏳ Agregando impresora..." -ForegroundColor Yellow
            
            try {
                # Crear puerto IPP
                $portName = "IPP_${ServerIP}_${PrinterName}"
                Add-PrinterPort -Name $portName -PrinterHostAddress $PrinterUri -ErrorAction Stop
                
                # Agregar impresora con driver genérico IPP
                Add-Printer -Name $PrinterName `
                            -PortName $portName `
                            -DriverName "Microsoft IPP Class Driver" `
                            -Comment "Impresora IPP en $ServerIP" `
                            -Location $PrinterAlias `
                            -ErrorAction Stop
                
                Write-Host ""
                Write-Host "══════════════════════════════════════════════════════════" -ForegroundColor Cyan
                Write-Host "  ✅ CONFIGURACIÓN COMPLETADA" -ForegroundColor Green
                Write-Host "══════════════════════════════════════════════════════════" -ForegroundColor Cyan
                Write-Host ""
                Write-Host "La impresora '$PrinterAlias' está lista para usar." -ForegroundColor Green
                Write-Host ""
                Write-Host "Puedes encontrarla en:" -ForegroundColor Yellow
                Write-Host "  Configuración > Dispositivos > Impresoras y escáneres"
                Write-Host ""
                
            } catch {
                Write-Host "❌ ERROR: No se pudo agregar la impresora" -ForegroundColor Red
                Write-Host "Detalles: $($_.Exception.Message)" -ForegroundColor Red
                exit 1
            }
            """;
    }

    private String generateLinuxScript() {
        // El script completo esta en scripts/add-printer-linux.sh
        return """
            #!/bin/bash
            # ═══════════════════════════════════════════════════════
            # Script para agregar impresoras IPP en Linux
            # ═══════════════════════════════════════════════════════
            #
            # INSTRUCCIONES DE USO:
            #
            # 1. Guardar este script como: add-printer.sh
            #    
            # 2. Dar permisos de ejecución:
            #    chmod +x add-printer.sh
            #
            # 3. Ejecutar el script:
            #    ./add-printer.sh <IP-SERVIDOR> <NOMBRE-IMPRESORA> [ALIAS]
            #
            # EJEMPLOS:
            #    ./add-printer.sh 192.168.1.100 HP_LaserJet
            #    ./add-printer.sh 192.168.1.100 HP_LaserJet "Impresora Oficina"
            #
            # NOTAS:
            #    - Requiere CUPS instalado (sudo apt install cups)
            #    - Requiere permisos sudo para agregar impresoras
            #    - El servidor debe estar accesible en el puerto 631
            #
            # ═══════════════════════════════════════════════════════
            
            set -e
            
            # Validar parámetros
            if [ $# -lt 2 ]; then
                echo "❌ ERROR: Faltan parámetros"
                echo ""
                echo "Uso: $0 <server-ip> <printer-name> [alias]"
                echo ""
                echo "Ejemplo:"
                echo "  $0 192.168.1.100 HP_LaserJet 'Impresora Oficina'"
                echo ""
                exit 1
            fi
            
            SERVER_IP="$1"
            PRINTER_NAME="$2"
            PRINTER_ALIAS="${3:-$PRINTER_NAME}"
            PRINTER_URI="ipp://${SERVER_IP}:631/printers/${PRINTER_NAME}"
            
            echo "══════════════════════════════════════════════════════════"
            echo "  Configurando Impresora IPP"
            echo "══════════════════════════════════════════════════════════"
            echo "  Servidor: ${SERVER_IP}"
            echo "  Impresora: ${PRINTER_NAME}"
            echo "  Alias: ${PRINTER_ALIAS}"
            echo "  URI: ${PRINTER_URI}"
            echo "══════════════════════════════════════════════════════════"
            echo ""
            
            # Verificar si CUPS está instalado
            if ! command -v lpadmin &> /dev/null; then
                echo "⚠️  CUPS no está instalado. Instalando..."
                sudo apt-get update && sudo apt-get install -y cups
            fi
            
            # Verificar conectividad
            echo "⏳ Verificando conectividad..."
            if timeout 3 bash -c "cat < /dev/null > /dev/tcp/${SERVER_IP}/631" 2>/dev/null; then
                echo "✅ Servidor accesible"
            else
                echo "❌ ERROR: No se puede conectar al servidor"
                exit 1
            fi
            
            # Eliminar impresora si ya existe
            if lpstat -p "${PRINTER_NAME}" &>/dev/null; then
                echo "⚠️  Impresora ya existe, eliminando..."
                sudo lpadmin -x "${PRINTER_NAME}"
            fi
            
            # Agregar impresora
            echo "⏳ Agregando impresora..."
            sudo lpadmin -p "${PRINTER_NAME}" \
                -E \
                -v "${PRINTER_URI}" \
                -D "${PRINTER_ALIAS}" \
                -L "Servidor: ${SERVER_IP}" \
                -m everywhere
            
            if [ $? -eq 0 ]; then
                echo "✅ Impresora agregada exitosamente"
                
                # Habilitar impresora
                sudo cupsenable "${PRINTER_NAME}"
                sudo cupsaccept "${PRINTER_NAME}"
                
                echo ""
                echo "══════════════════════════════════════════════════════════"
                echo "  ✅ CONFIGURACIÓN COMPLETADA"
                echo "══════════════════════════════════════════════════════════"
                echo ""
                echo "La impresora '${PRINTER_ALIAS}' está lista para usar."
                echo ""
                echo "Comandos útiles:"
                echo "  • Ver estado:       lpstat -p ${PRINTER_NAME}"
                echo "  • Imprimir prueba:  lp -d ${PRINTER_NAME} archivo.txt"
                echo "  • Ver trabajos:     lpq -P ${PRINTER_NAME}"
                echo ""
            else
                echo "❌ ERROR: No se pudo agregar la impresora"
                exit 1
            fi
            """;
    }

    // Clase interna para información de impresoras
    public static class PrinterInfo {
        public String name;
        public String model;
        public String location;
        public String ippUri;
        public String windowsCommand;
        public String linuxCommand;
        
        public PrinterInfo(String name, String model, String location, 
                          String ippUri, String windowsCommand, String linuxCommand) {
            this.name = name;
            this.model = model;
            this.location = location;
            this.ippUri = ippUri;
            this.windowsCommand = windowsCommand;
            this.linuxCommand = linuxCommand;
        }
    }
}
